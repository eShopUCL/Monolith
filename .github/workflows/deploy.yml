name: Deploy to AKS

on:
  push:
    branches:
      - main

jobs:
  deploy-to-aks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Azure CLI
        run: |
          echo "Installing Azure CLI..."
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
          az --version  # Optional: just to verify Azure CLI is installed correctly

      - name: Authenticate and Set Subscription
        env:
          AZURE_ACCESS_TOKEN: ${{ secrets.AZURE_ACCESS_TOKEN }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        run: |
          echo "Starting authentication using Azure Access Token..."

          # Save the access token temporarily for easier handling
          echo "$AZURE_ACCESS_TOKEN" > /tmp/azure_access_token
          ACCESS_TOKEN=$(cat /tmp/azure_access_token)

          # Check if access token is empty
          if [ -z "$ACCESS_TOKEN" ]; then
            echo "ERROR: Access token is empty. Exiting..."
            exit 1
          fi

          echo "Access token obtained successfully."

          # Use the Azure access token to authenticate
          echo "Authenticating using access token and setting the active subscription..."
          az account set --subscription "$AZURE_SUBSCRIPTION_ID"

          # Verify the current subscriptions to debug
          echo "Current subscriptions:"
          az account list --output table

          # Show the active subscription to confirm we're in the right one
          echo "Active subscription:"
          az account show --subscription "$AZURE_SUBSCRIPTION_ID"

      - name: Get AKS Credentials
        env:
          AZURE_ACCESS_TOKEN: ${{ secrets.AZURE_ACCESS_TOKEN }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        run: |
          echo "Getting AKS credentials..."
          ACCESS_TOKEN=$(cat /tmp/azure_access_token)
          az aks get-credentials --resource-group eShopResourceGroup --name eShopCluster --admin --overwrite-existing --subscription "$AZURE_SUBSCRIPTION_ID"

          # Debugging: List current Kubernetes context
          echo "Current Kubernetes contexts:"
          kubectl config get-contexts
