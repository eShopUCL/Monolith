apiVersion: apps/v1
# 1. StatefulSet is used to manage stateful applications, that is, applications that require persistent storage.
  # It replaces the Deployment. It will also ensure predictable names for the pods.
kind: StatefulSet
metadata:
  name: sqlserver
  labels:
    app: sqlserver
spec:
  # Number of replicas is set to 3, due to the high availability requirements of the SQL Server.
  replicas: 3
  # Headless service is required for the StatefulSet communication. Its for pod to pod communication.
  serviceName: sqlserver-headless
  selector:
    matchLabels:
      app: sqlserver
  template:
    metadata:
      labels:
        app: sqlserver
    spec:
      containers:
      - name: sqlserver
        image: mcr.microsoft.com/azure-sql-edge:latest
        ports:
        - containerPort: 1433
        env:
        - name: SA_PASSWORD
          value: "@someThingComplicated1234"
        - name: ACCEPT_EULA
          value: "Y"
        volumeMounts:
        - name: sqlstorage
          mountPath: /var/opt/mssql
        securityContext:
          runAsUser: 0  # Run as root user to bypass security restrictions
        # readinessProbe is used to check if the container is ready to accept traffic.
          # it works by executing a command inside the container and checking the exit code.
          # If the exit code is 0, the container is ready.
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - "echo SELECT 1 | /opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P @someThingComplicated1234"
          initialDelaySeconds: 10
          periodSeconds: 15
  # VolumeClaimTemplates is used to create a PersistentVolumeClaim for each pod.
  # Each pod gets its own persistent volume, for isolated data storage. (e.g., sqlstorage-0, sqlstorage-1).
  volumeClaimTemplates:
  - metadata:
      name: sqlstorage
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 3Gi  
---
# 2. Headless Service for StatefulSet communication.
apiVersion: v1
kind: Service
metadata:
  name: sqlserver-headless
spec:
  clusterIP: None  # Headless service enables direct pod-to-pod communication.
  selector:
    app: sqlserver
  ports:
  - port: 1433
    targetPort: 1433
---
# 3. Standard LoadBalancer Service for external access to SQL Server.
apiVersion: v1
kind: Service
metadata:
  name: sqlserver-service
  labels:
    app: sqlserver
spec:
  type: LoadBalancer  # Allows external access to the SQL Server primary replica.
  ports:
    - port: 1433
      targetPort: 1433
  selector:
    app: sqlserver
